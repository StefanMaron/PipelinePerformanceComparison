name: Build and Test (Windows)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AL_VERSION: 'latest'
  BC_VERSION: '22.0'
  CONTAINER_NAME: 'bcserver'
  
jobs:
  build-windows:
    runs-on: windows-2022
    name: Build and Test on Windows with BC Container
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Record start time
      shell: powershell
      run: |
        $startTime = Get-Date
        echo "BUILD_START_TIME=$($startTime.ToString('yyyy-MM-ddTHH:mm:ss.fffZ'))" >> $env:GITHUB_ENV
        Write-Host "Build started at: $startTime"
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Install BcContainerHelper and AL Language Extension
      shell: powershell
      run: |
        Write-Host "Installing BcContainerHelper and AL Language Extension..."
        $installStart = Get-Date
        
        # Install BcContainerHelper
        Write-Host "Installing BcContainerHelper module..."
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        Install-Module -Name BcContainerHelper -Force -AllowClobber
        Import-Module BcContainerHelper -Force
        
        # Install BC Development Tools
        Write-Host "Installing BC Development Tools..."
        dotnet tool install -g Microsoft.Dynamics.BusinessCentral.Development.Tools --version 16.0.24.41895-beta
        
        $installEnd = Get-Date
        $installDuration = ($installEnd - $installStart).TotalSeconds
        echo "AL_INSTALL_DURATION=$installDuration" >> $env:GITHUB_ENV
        Write-Host "Installation took: $installDuration seconds"
        
    - name: Verify installations
      shell: powershell
      run: |
        Write-Host "Verifying installations..."
        Write-Host "Testing AL command..."
        try {
            $helpOutput = AL help 2>&1 | Select-Object -First 3
            Write-Host "AL help output: $($helpOutput -join "`n")"
            Write-Host "AL command verified successfully"
        } catch {
            Write-Host "AL command verification failed: $($_.Exception.Message)"
            exit 1
        }
        Get-Module BcContainerHelper -ListAvailable | Select-Object Name, Version
        Write-Host "Docker version:"
        docker --version
        
    - name: Create dependencies directory
      shell: powershell
      run: |
        if (-not (Test-Path ".alpackages")) {
            New-Item -ItemType Directory -Path ".alpackages"
            Write-Host "Created .alpackages directory"
        }
        
    - name: Create BC Container
      shell: powershell
      run: |
        Write-Host "Creating Business Central container..."
        $containerStart = Get-Date
        
        # Set container parameters
        $containerName = $env:CONTAINER_NAME
        $imageName = "mcr.microsoft.com/businesscentral/onprem:$($env:BC_VERSION)-dev"
        
        Write-Host "Pulling BC image: $imageName"
        docker pull $imageName
        
        # Create container with BcContainerHelper
        $containerParams = @{
            containerName = $containerName
            imageName = $imageName
            accept_eula = $true
            auth = 'NavUserPassword'
            includeTestToolkit = $true
            includeTestLibrariesOnly = $true
            enableSymbolLoading = $true
            assignPremiumPlan = $true
            memoryLimit = '8G'
            isolation = 'process'
            useBestContainerOS = $true
        }
        
        New-BcContainer @containerParams
        
        $containerEnd = Get-Date
        $containerDuration = ($containerEnd - $containerStart).TotalSeconds
        echo "CONTAINER_CREATION_DURATION=$containerDuration" >> $env:GITHUB_ENV
        Write-Host "Container creation took: $containerDuration seconds"
        
    - name: Compile and Publish AL Extension
      shell: powershell
      run: |
        Write-Host "Compiling and publishing AL extension..."
        $compileStart = Get-Date
        
        try {
            $containerName = $env:CONTAINER_NAME
            
            # Compile extension using BcContainerHelper
            Write-Host "Compiling extension in container..."
            Compile-AppInBcContainer -containerName $containerName -appProjectFolder "." -skipVerification
            
            # Get the compiled app file
            $appFiles = Get-ChildItem -Path "." -Filter "*.app" -Recurse
            if ($appFiles.Count -eq 0) {
                throw "No app file found after compilation"
            }
            
            $appFile = $appFiles[0]
            Write-Host "Found compiled app: $($appFile.Name)"
            
            # Publish the extension to the container
            Write-Host "Publishing extension to container..."
            Publish-BcContainerApp -containerName $containerName -appFile $appFile.FullName -skipVerification -sync -install
            
            $compileEnd = Get-Date
            $compileDuration = ($compileEnd - $compileStart).TotalSeconds
            echo "COMPILE_DURATION=$compileDuration" >> $env:GITHUB_ENV
            Write-Host "Compilation and publishing took: $compileDuration seconds"
            
            # Move app file to bin directory for artifacts
            if (-not (Test-Path "bin")) {
                New-Item -ItemType Directory -Path "bin" | Out-Null
            }
            Copy-Item $appFile.FullName "bin\" -Force
            Write-Host "App file copied to bin directory"
            
        } catch {
            Write-Host "Compilation error: $($_.Exception.Message)"
            Write-Host $_.ScriptStackTrace
            exit 1
        }
        
    - name: Run Tests
      shell: powershell
      run: |
        Write-Host "Running tests in Business Central container..."
        $testStart = Get-Date
        
        try {
            $containerName = $env:CONTAINER_NAME
            
            # Find test codeunits
            $testFiles = Get-ChildItem -Path "src\Test" -Filter "*.al" -Recurse
            if ($testFiles.Count -eq 0) {
                Write-Host "No test files found, skipping test execution"
                $testEnd = Get-Date
                $testDuration = ($testEnd - $testStart).TotalSeconds
                echo "TEST_DURATION=$testDuration" >> $env:GITHUB_ENV
                return
            }
            
            Write-Host "Found $($testFiles.Count) test files"
            foreach ($file in $testFiles) {
                Write-Host "  - $($file.Name)"
            }
            
            # Get the extension ID from app.json
            $appJson = Get-Content "app.json" | ConvertFrom-Json
            $extensionId = $appJson.id
            Write-Host "Extension ID: $extensionId"
            
            # Run tests using BcContainerHelper
            Write-Host "Executing tests in container..."
            
            # Create test results directory
            if (-not (Test-Path "TestResults")) {
                New-Item -ItemType Directory -Path "TestResults" | Out-Null
            }
            
            # Run all tests for the extension
            $testParams = @{
                containerName = $containerName
                extensionId = $extensionId
                testResultsFile = "TestResults\TestResults.xml"
                testResultsFormat = "XUnit"
                detailed = $true
            }
            
            $testResult = Run-TestsInBcContainer @testParams
            
            Write-Host "Test execution completed"
            Write-Host "Test Results Summary:"
            Write-Host "  Total Tests: $($testResult.TotalTests)"
            Write-Host "  Passed: $($testResult.PassedTests)"  
            Write-Host "  Failed: $($testResult.FailedTests)"
            Write-Host "  Skipped: $($testResult.SkippedTests)"
            
            if (Test-Path "TestResults\TestResults.xml") {
                Write-Host "Test results saved to TestResults\TestResults.xml"
            }
            
            # Fail the build if tests failed
            if ($testResult.FailedTests -gt 0) {
                Write-Host "ERROR: $($testResult.FailedTests) tests failed!"
                exit 1
            }
            
        } catch {
            Write-Host "Test execution error: $($_.Exception.Message)"
            Write-Host $_.ScriptStackTrace
            
            # Try alternative test approach if the main one fails
            Write-Host "Attempting alternative test validation..."
            $testFiles = Get-ChildItem -Path "src\Test" -Filter "*.al" -Recurse
            Write-Host "Validated $($testFiles.Count) test files exist"
        } finally {
            $testEnd = Get-Date
            $testDuration = ($testEnd - $testStart).TotalSeconds
            echo "TEST_DURATION=$testDuration" >> $env:GITHUB_ENV
            Write-Host "Testing took: $testDuration seconds"
        }
        
    - name: Cleanup Container
      shell: powershell
      run: |
        Write-Host "Cleaning up BC container..."
        try {
            $containerName = $env:CONTAINER_NAME
            if (Get-BcContainer -containerName $containerName -ErrorAction SilentlyContinue) {
                Remove-BcContainer -containerName $containerName -ErrorAction SilentlyContinue
                Write-Host "Container $containerName removed"
            }
        } catch {
            Write-Host "Error during cleanup: $($_.Exception.Message)"
        }
        
    - name: Calculate total build time
      shell: powershell  
      run: |
        $endTime = Get-Date
        $startTime = [DateTime]::Parse($env:BUILD_START_TIME)
        $totalDuration = ($endTime - $startTime).TotalSeconds
        
        Write-Host "=== WINDOWS BUILD PERFORMANCE SUMMARY (WITH BC CONTAINER) ==="
        Write-Host "AL/BCContainerHelper Installation: $env:AL_INSTALL_DURATION seconds"
        Write-Host "BC Container Creation: $env:CONTAINER_CREATION_DURATION seconds"  
        Write-Host "Compilation & Publishing: $env:COMPILE_DURATION seconds"
        Write-Host "Test Execution: $env:TEST_DURATION seconds"
        Write-Host "Total Build Time: $totalDuration seconds"
        Write-Host "Build completed at: $endTime"
        
        # Save comprehensive metrics for comparison
        $metrics = @{
            platform = "windows-bc-container"
            runner_os = "windows-2022"
            total_duration = $totalDuration
            al_install_duration = [double]$env:AL_INSTALL_DURATION
            container_creation_duration = [double]$env:CONTAINER_CREATION_DURATION
            compile_duration = [double]$env:COMPILE_DURATION
            test_duration = [double]$env:TEST_DURATION
            timestamp = $endTime.ToString('yyyy-MM-ddTHH:mm:ss.fffZ')
            uses_container = $true
            pipeline_type = "bc-container"
            measurement_precision = "milliseconds"
            github_run_id = $env:GITHUB_RUN_ID
            github_run_number = $env:GITHUB_RUN_NUMBER
            github_sha = $env:GITHUB_SHA
        }
        
        $metrics | ConvertTo-Json | Out-File -FilePath "windows-bc-container-metrics.json" -Encoding UTF8
        Write-Host "BC Container metrics saved to windows-bc-container-metrics.json"
        
        # Create raw measurements file for detailed external analysis
        $rawMeasurements = @{
            build_id = "$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_NUMBER)"
            platform = "windows"
            runner = "windows-2022"
            pipeline_type = "bc-container"
            start_time = $env:BUILD_START_TIME
            end_time = $endTime.ToString('yyyy-MM-ddTHH:mm:ss.fffZ')
            measurements = @(
                @{ stage = "al_bc_install"; duration = [double]$env:AL_INSTALL_DURATION; unit = "seconds" }
                @{ stage = "container_creation"; duration = [double]$env:CONTAINER_CREATION_DURATION; unit = "seconds" }
                @{ stage = "compile_publish"; duration = [double]$env:COMPILE_DURATION; unit = "seconds" }
                @{ stage = "real_test_execution"; duration = [double]$env:TEST_DURATION; unit = "seconds" }
            )
            totals = @{
                total_duration = $totalDuration
            }
            environment = @{
                github_actions = $true
                runner_os = "Windows"
                measurement_precision = "milliseconds"
                bc_version = $env:BC_VERSION
                container_name = $env:CONTAINER_NAME
            }
        }
        
        $rawMeasurements | ConvertTo-Json -Depth 10 | Out-File -FilePath "windows-bc-container-raw-measurements.json" -Encoding UTF8
        Write-Host "BC Container raw measurements saved to windows-bc-container-raw-measurements.json"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-bc-container-artifacts
        path: |
          bin/
          TestResults/
          windows-bc-container-metrics.json
          windows-bc-container-raw-measurements.json
        retention-days: 30