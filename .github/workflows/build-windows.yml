name: Build and Test (Windows with AL Compiler)

on:
  workflow_dispatch:
  workflow_call:

env:
  AL_VERSION: 'latest'
  BC_VERSION: '26.5'
  CONTAINER_NAME: 'bcserver'

jobs:
  build-windows:
    runs-on: windows-latest
    name: Build with AL Compiler and Test in BC Container
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Record start time
      shell: powershell
      run: |
        $startTime = Get-Date
        echo "BUILD_START_TIME=$($startTime.ToString('yyyy-MM-ddTHH:mm:ss.fffZ'))" >> $env:GITHUB_ENV
        Write-Host "Build started at: $startTime"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install BcContainerHelper and BC Development Tools
      shell: powershell
      run: |
        Write-Host "Installing BcContainerHelper and BC Development Tools..."
        $setupStart = Get-Date

        # Install BcContainerHelper
        Write-Host "Installing BcContainerHelper module..."
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        Install-Module -Name BcContainerHelper -Force -AllowClobber
        Import-Module BcContainerHelper -Force -DisableNameChecking

        # Enable partner telemetry for better debugging
        Write-Host "Configuring BcContainerHelper telemetry..."
        if ("${{ secrets.PARTNER_TELEMETRY_CONNECTION_STRING }}" -ne "") {
            Write-Host "Partner telemetry enabled with extended telemetry"
            $bcContainerHelperConfig.PartnerTelemetryConnectionString = "${{ secrets.PARTNER_TELEMETRY_CONNECTION_STRING }}"
            $bcContainerHelperConfig.SendExtendedTelemetryToMicrosoft = $true
        } else {
            Write-Host "No partner telemetry connection string configured - skipping"
        }
        # Enable detailed container helper output
        $bcContainerHelperConfig.TreatWarningsAsErrors = @()

        # Install BC Development Tools (AL compiler)
        Write-Host "Installing BC Development Tools..."
        dotnet tool install -g Microsoft.Dynamics.BusinessCentral.Development.Tools --version 16.0.24.41895-beta

        # Verify installations
        Write-Host "Verifying installations..."
        Write-Host "Testing AL command..."
        $ErrorActionPreference = "Continue"
        AL --version
        $ErrorActionPreference = "Stop"
        Write-Host "AL command verified successfully"

        Get-Module BcContainerHelper -ListAvailable | Select-Object Name, Version
        Write-Host "Docker version:"
        docker --version

        $setupEnd = Get-Date
        $setupDuration = ($setupEnd - $setupStart).TotalSeconds
        echo "SETUP_DURATION=$setupDuration" >> $env:GITHUB_ENV
        Write-Host "Setup (.NET + BcContainerHelper + AL tools) took: $setupDuration seconds"

    - name: Create dependencies directory
      shell: powershell
      run: |
        $dirStart = Get-Date
        if (-not (Test-Path ".alpackages")) {
            New-Item -ItemType Directory -Path ".alpackages"
            Write-Host "Created .alpackages directory"
        }
        $dirEnd = Get-Date
        $dirDuration = ($dirEnd - $dirStart).TotalSeconds
        echo "DIR_CREATION_DURATION=$dirDuration" >> $env:GITHUB_ENV
        Write-Host "Directory creation took: $dirDuration seconds"

    - name: Download BC Symbol Packages
      shell: powershell
      run: |
        Write-Host "Downloading Business Central symbol packages from Microsoft feed..."
        $downloadStart = Get-Date

        # Microsoft BC Symbols NuGet feed
        $bcFeed = "https://dynamicssmb2.pkgs.visualstudio.com/DynamicsBCPublicFeeds/_packaging/MSSymbols/nuget/v3/index.json"

        try {
            # Download packages directly using the same approach as compile-only pipeline
            $bcVersion = "26.3.36158.36341"
            $bcBaseUrl = "https://dynamicssmb2.pkgs.visualstudio.com/571e802d-b44b-45fc-bd41-4cfddec73b44/_packaging/b656b10c-3de0-440c-900c-bc2e4e86d84c/nuget/v3/flat2"

            New-Item -ItemType Directory -Path temp_packages -Force | Out-Null

            Write-Host "Downloading Microsoft.SystemApplication.US.symbols..."
            Invoke-WebRequest -Uri "$bcBaseUrl/microsoft.systemapplication.us.symbols.63ca2fa4-4f03-4f2b-a480-172fef340d3f/$bcVersion/microsoft.systemapplication.us.symbols.63ca2fa4-4f03-4f2b-a480-172fef340d3f.$bcVersion.nupkg" -OutFile "temp_packages\microsoft.systemapplication.us.symbols.nupkg" -UseBasicParsing -ErrorAction SilentlyContinue

            Write-Host "Downloading Microsoft.BaseApplication.US.symbols..."
            Invoke-WebRequest -Uri "$bcBaseUrl/microsoft.baseapplication.us.symbols.437dbf0e-84ff-417a-965d-ed2bb9650972/$bcVersion/microsoft.baseapplication.us.symbols.437dbf0e-84ff-417a-965d-ed2bb9650972.$bcVersion.nupkg" -OutFile "temp_packages\microsoft.baseapplication.us.symbols.nupkg" -UseBasicParsing -ErrorAction SilentlyContinue

            Write-Host "Downloading Microsoft.Application.US.symbols..."
            Invoke-WebRequest -Uri "$bcBaseUrl/microsoft.application.us.symbols/$bcVersion/microsoft.application.us.symbols.$bcVersion.nupkg" -OutFile "temp_packages\microsoft.application.us.symbols.nupkg" -UseBasicParsing -ErrorAction SilentlyContinue

            # Second-level dependencies
            Write-Host "Downloading Microsoft.BusinessFoundation.US.symbols (second-level dependency)..."
            Invoke-WebRequest -Uri "$bcBaseUrl/microsoft.businessfoundation.us.symbols.f3552374-a1f2-4356-848e-196002525837/$bcVersion/microsoft.businessfoundation.us.symbols.f3552374-a1f2-4356-848e-196002525837.$bcVersion.nupkg" -OutFile "temp_packages\microsoft.businessfoundation.us.symbols.nupkg" -UseBasicParsing -ErrorAction SilentlyContinue

            # The actual System package (not SystemApplication)
            $platformVersion = "26.0.38176"
            Write-Host "Downloading Microsoft.Platform.symbols v$platformVersion (System dependency)..."
            Invoke-WebRequest -Uri "$bcBaseUrl/microsoft.platform.symbols/$platformVersion/microsoft.platform.symbols.$platformVersion.nupkg" -OutFile "temp_packages\microsoft.platform.symbols.nupkg" -UseBasicParsing -ErrorAction SilentlyContinue

            # Extract .nupkg files (which are zip files) - rename to .zip first for PowerShell
            Get-ChildItem -Path temp_packages -Filter "*.nupkg" | ForEach-Object {
                if ($_.Length -gt 0) {
                    Write-Host "Extracting $($_.Name)..."
                    $extractPath = "temp_packages\extracted\$($_.BaseName)"
                    New-Item -ItemType Directory -Path $extractPath -Force | Out-Null
                    try {
                        # Rename .nupkg to .zip for PowerShell Expand-Archive
                        $zipFile = $_.FullName -replace '\.nupkg$', '.zip'
                        Rename-Item $_.FullName $zipFile
                        Expand-Archive -Path $zipFile -DestinationPath $extractPath -Force
                        # Rename back for consistency
                        Rename-Item $zipFile $_.FullName
                    } catch {
                        Write-Host "Failed to extract $($_.Name): $($_.Exception.Message)"
                    }
                } else {
                    Write-Host "Skipping empty file: $($_.Name)"
                }
            }

            # Extract .app files from downloaded packages
            Get-ChildItem -Path temp_packages -Filter "*.app" -Recurse | ForEach-Object {
                Copy-Item $_.FullName ".alpackages\" -Force
                Write-Host "Copied: $($_.Name)"
            }

            # Clean up temporary files
            Remove-Item -Recurse -Force temp_packages -ErrorAction SilentlyContinue

            $downloadEnd = Get-Date
            $downloadDuration = ($downloadEnd - $downloadStart).TotalSeconds
            echo "SYMBOLS_DOWNLOAD_DURATION=$downloadDuration" >> $env:GITHUB_ENV
            Write-Host "BC symbols download took: $downloadDuration seconds"

            # List downloaded symbols
            Write-Host "Downloaded symbol packages:"
            Get-ChildItem .alpackages -Filter "*.app" | ForEach-Object { Write-Host "  $($_.Name)" }

        } catch {
            Write-Host "Error downloading BC symbols: $($_.Exception.Message)"
            echo "SYMBOLS_DOWNLOAD_DURATION=0" >> $env:GITHUB_ENV
        }

    - name: Calculate total dependency time
      shell: powershell
      run: |
        # Calculate total time for BC symbol downloads
        $systemDownload = if ($env:SYMBOLS_DOWNLOAD_DURATION) { [double]$env:SYMBOLS_DOWNLOAD_DURATION } else { 0 }
        echo "SYSTEM_DOWNLOAD_DURATION=$systemDownload" >> $env:GITHUB_ENV
        echo "SYSTEM_EXTRACT_DURATION=0" >> $env:GITHUB_ENV
        echo "BASE_DOWNLOAD_DURATION=0" >> $env:GITHUB_ENV
        echo "BASE_EXTRACT_DURATION=0" >> $env:GITHUB_ENV
        echo "TOTAL_DEPENDENCY_DURATION=$systemDownload" >> $env:GITHUB_ENV
        Write-Host "Total dependency handling: $systemDownload seconds"

    - name: Create BC Container
      shell: powershell
      run: |
        Write-Host "Creating Business Central container..."
        $containerStart = Get-Date

        # Set container parameters
        $containerName = $env:CONTAINER_NAME

        # Get artifact URL using BcContainerHelper
        Write-Host "Resolving BC artifact URL for version $($env:BC_VERSION)..."
        $artifactUrl = Get-BCArtifactUrl -type Sandbox -version $env:BC_VERSION -country w1 -select Latest
        Write-Host "Using artifact URL: $artifactUrl"

        # Create credentials
        $password = ConvertTo-SecureString -String 'P@ssw0rd' -AsPlainText -Force
        $credential = New-Object pscredential 'admin', $password

        # Additional parameters for custom settings
        $additionalParameters = @(
            "--env CustomNavSettings=DisableWriteInsideTryFunctions=false"
        )

        # Create container with BcContainerHelper - will download artifacts automatically
        $containerParams = @{
            containerName = $containerName
            artifactUrl = $artifactUrl
            credential = $credential
            accept_eula = $true
            auth = 'UserPassword'
            includeTestToolkit = $true
            assignPremiumPlan = $true
            memoryLimit = '8G'
            isolation = 'process'
            updateHosts = $true
            additionalParameters = $additionalParameters
        }

        New-BcContainer @containerParams -Verbose

        $containerEnd = Get-Date
        $containerDuration = ($containerEnd - $containerStart).TotalSeconds
        echo "CONTAINER_CREATION_DURATION=$containerDuration" >> $env:GITHUB_ENV
        Write-Host "Container creation took: $containerDuration seconds"

    - name: Pre-compilation setup
      shell: powershell
      run: |
        $setupStart = Get-Date
        # Create bin directory if it doesn't exist
        if (-not (Test-Path "bin")) {
            New-Item -ItemType Directory -Path "bin" | Out-Null
        }
        $setupEnd = Get-Date
        $setupDuration = ($setupEnd - $setupStart).TotalSeconds
        echo "PRECOMPILE_SETUP_DURATION=$setupDuration" >> $env:GITHUB_ENV
        Write-Host "Pre-compilation setup: $setupDuration seconds"

    - name: Compile AL Extension with AL Compiler
      shell: powershell
      run: |
        Write-Host "Compiling AL extension with AL compiler..."
        $compileStart = Get-Date

        try {
            # Compile using AL command line compiler with symbols from .alpackages
            Write-Host "Running AL compiler..."
            AL compile /project:"." /packagecachepath:".alpackages"
            $compileResult = $LASTEXITCODE

            $compileEnd = Get-Date
            $compileDuration = ($compileEnd - $compileStart).TotalSeconds
            echo "COMPILE_DURATION=$compileDuration" >> $env:GITHUB_ENV
            Write-Host "Compilation took: $compileDuration seconds"

            if ($compileResult -ne 0) {
                Write-Host "Compilation failed with exit code: $compileResult"
                exit $compileResult
            }

            # Get the compiled app file
            $appFiles = Get-ChildItem -Path "." -Filter "*.app" -Recurse
            if ($appFiles.Count -eq 0) {
                throw "No app file found after compilation"
            }

            $appFile = $appFiles[0]
            Write-Host "Found compiled app: $($appFile.Name)"

            # Copy to bin directory for artifacts
            Copy-Item $appFile.FullName "bin\" -Force
            Write-Host "App file copied to bin directory"

            Write-Host "Compilation successful"

        } catch {
            Write-Host "Compilation error: $($_.Exception.Message)"
            Write-Host $_.ScriptStackTrace
            exit 1
        }

    - name: Post-compilation analysis
      shell: powershell
      run: |
        $analysisStart = Get-Date

        # List compiled files
        if (Test-Path "bin") {
            Write-Host "Compiled files:"
            $appFiles = Get-ChildItem "bin" -Recurse -Filter "*.app"
            foreach ($file in $appFiles) {
                $size = [math]::Round($file.Length / 1KB, 2)
                Write-Host "  $($file.Name) - ${size} KB"
            }
            echo "APP_COUNT=$($appFiles.Count)" >> $env:GITHUB_ENV

            if ($appFiles.Count -gt 0) {
                $totalSize = ($appFiles | Measure-Object -Property Length -Sum).Sum
                $totalSizeKB = [math]::Round($totalSize / 1KB, 2)
                echo "TOTAL_APP_SIZE_KB=$totalSizeKB" >> $env:GITHUB_ENV
                Write-Host "Total app size: ${totalSizeKB} KB"
            }
        }

        $analysisEnd = Get-Date
        $analysisDuration = ($analysisEnd - $analysisStart).TotalSeconds
        echo "POST_COMPILE_ANALYSIS_DURATION=$analysisDuration" >> $env:GITHUB_ENV
        Write-Host "Post-compilation analysis: $analysisDuration seconds"

    - name: Publish App to Container
      shell: powershell
      run: |
        Write-Host "Publishing app to BC container..."
        $publishStart = Get-Date

        try {
            $containerName = $env:CONTAINER_NAME

            # Get the compiled app file
            $appFile = Get-ChildItem -Path "bin" -Filter "*.app" | Select-Object -First 1
            if (-not $appFile) {
                throw "No app file found in bin directory"
            }

            Write-Host "Found app file: $($appFile.Name)"

            # Publish the extension to the container
            Write-Host "Publishing extension to container..."
            Publish-BcContainerApp -containerName $containerName -appFile $appFile.FullName -skipVerification -sync -install

            Write-Host "App published successfully"

            $publishEnd = Get-Date
            $publishDuration = ($publishEnd - $publishStart).TotalSeconds
            echo "PUBLISH_DURATION=$publishDuration" >> $env:GITHUB_ENV
            Write-Host "Publishing took: $publishDuration seconds"

        } catch {
            Write-Host "Publishing error: $($_.Exception.Message)"
            Write-Host $_.ScriptStackTrace
            exit 1
        }

    - name: Run Tests
      shell: powershell
      run: |
        Write-Host "Running tests in Business Central container..."
        $testStart = Get-Date

        try {
            $containerName = $env:CONTAINER_NAME

            # Find test codeunits
            $testFiles = Get-ChildItem -Path "src\Test" -Filter "*.al" -Recurse -ErrorAction SilentlyContinue
            if ($testFiles.Count -eq 0) {
                Write-Host "No test files found, skipping test execution"
                $testEnd = Get-Date
                $testDuration = ($testEnd - $testStart).TotalSeconds
                echo "TEST_DURATION=$testDuration" >> $env:GITHUB_ENV
                return
            }

            Write-Host "Found $($testFiles.Count) test files"
            foreach ($file in $testFiles) {
                Write-Host "  - $($file.Name)"
            }

            # Get the extension ID from app.json
            $appJson = Get-Content "app.json" | ConvertFrom-Json
            $extensionId = $appJson.id
            Write-Host "Extension ID: $extensionId"

            # Run tests using BcContainerHelper
            Write-Host "Executing tests in container..."

            # Create test results directory
            if (-not (Test-Path "TestResults")) {
                New-Item -ItemType Directory -Path "TestResults" | Out-Null
            }

            # Create credentials for test execution
            $password = ConvertTo-SecureString -String 'P@ssw0rd' -AsPlainText -Force
            $credential = New-Object pscredential 'admin', $password

            # Run all tests for the extension
            $testParams = @{
                containerName = $containerName
                extensionId = $extensionId
                credential = $credential
                GitHubActions = "warning"
                detailed = $true
            }

            $testResult = Run-TestsInBcContainer @testParams

            Write-Host "Test execution completed"
            Write-Host "Test Results Summary:"
            Write-Host "  Total Tests: $($testResult.TotalTests)"
            Write-Host "  Passed: $($testResult.PassedTests)"
            Write-Host "  Failed: $($testResult.FailedTests)"
            Write-Host "  Skipped: $($testResult.SkippedTests)"

            if (Test-Path "TestResults\TestResults.xml") {
                Write-Host "Test results saved to TestResults\TestResults.xml"
            }

            # Fail the build if tests failed
            if ($testResult.FailedTests -gt 0) {
                Write-Host "ERROR: $($testResult.FailedTests) tests failed!"
                exit 1
            }

        } catch {
            Write-Host "Test execution error: $($_.Exception.Message)"
            Write-Host $_.ScriptStackTrace

            # Try alternative test approach if the main one fails
            Write-Host "Attempting alternative test validation..."
            $testFiles = Get-ChildItem -Path "src\Test" -Filter "*.al" -Recurse -ErrorAction SilentlyContinue
            Write-Host "Validated $($testFiles.Count) test files exist"
        } finally {
            $testEnd = Get-Date
            $testDuration = ($testEnd - $testStart).TotalSeconds
            echo "TEST_DURATION=$testDuration" >> $env:GITHUB_ENV
            Write-Host "Testing took: $testDuration seconds"
        }
        
    - name: Cleanup Container
      shell: powershell
      run: |
        Write-Host "Cleaning up BC container..."
        try {
            # Import BcContainerHelper module
            Import-Module BcContainerHelper -Force -DisableNameChecking -ErrorAction SilentlyContinue

            $containerName = $env:CONTAINER_NAME
            if (Get-BcContainer -containerName $containerName -ErrorAction SilentlyContinue) {
                Remove-BcContainer -containerName $containerName -ErrorAction SilentlyContinue
                Write-Host "Container $containerName removed"
            } else {
                Write-Host "Container $containerName not found or already removed"
            }
        } catch {
            Write-Host "Error during cleanup: $($_.Exception.Message)"
        }
        
    - name: Calculate total build time
      shell: powershell
      run: |
        $endTime = Get-Date
        $startTime = [DateTime]::Parse($env:BUILD_START_TIME)
        $totalDuration = ($endTime - $startTime).TotalSeconds

        Write-Host "=== WINDOWS BUILD PERFORMANCE SUMMARY (WITH AL COMPILER + CONTAINER) ==="
        Write-Host "Build Start Time: $env:BUILD_START_TIME"
        Write-Host "Build End Time: $($endTime.ToString('yyyy-MM-ddTHH:mm:ss.fffZ'))"
        Write-Host ""
        Write-Host "=== DETAILED TIMINGS ==="
        Write-Host "Setup (.NET + BcContainerHelper + AL tools): $env:SETUP_DURATION seconds"
        Write-Host "Directory Creation: $env:DIR_CREATION_DURATION seconds"
        Write-Host "System App Download: $env:SYSTEM_DOWNLOAD_DURATION seconds"
        Write-Host "System App Extract: $env:SYSTEM_EXTRACT_DURATION seconds"
        Write-Host "Base App Download: $env:BASE_DOWNLOAD_DURATION seconds"
        Write-Host "Base App Extract: $env:BASE_EXTRACT_DURATION seconds"
        Write-Host "Total Dependencies: $env:TOTAL_DEPENDENCY_DURATION seconds"
        Write-Host "Pre-compile Setup: $env:PRECOMPILE_SETUP_DURATION seconds"
        Write-Host "Compilation: $env:COMPILE_DURATION seconds"
        Write-Host "Post-compile Analysis: $env:POST_COMPILE_ANALYSIS_DURATION seconds"
        Write-Host "Container Creation: $env:CONTAINER_CREATION_DURATION seconds"
        Write-Host "Publishing: $env:PUBLISH_DURATION seconds"
        Write-Host "Testing: $env:TEST_DURATION seconds"
        Write-Host ""
        Write-Host "=== BUILD SUMMARY ==="
        Write-Host "Total Build Time: $totalDuration seconds"
        if ($env:APP_COUNT) { Write-Host "Apps Generated: $env:APP_COUNT" }
        if ($env:TOTAL_APP_SIZE_KB) { Write-Host "Total App Size: $env:TOTAL_APP_SIZE_KB KB" }

        # Save comprehensive metrics for comparison
        $metrics = @{
            platform = "windows-full-test"
            runner_os = "windows-2022"
            total_duration = $totalDuration
            setup_duration = if ($env:SETUP_DURATION) { [double]$env:SETUP_DURATION } else { 0 }
            dir_creation_duration = if ($env:DIR_CREATION_DURATION) { [double]$env:DIR_CREATION_DURATION } else { 0 }
            system_download_duration = if ($env:SYSTEM_DOWNLOAD_DURATION) { [double]$env:SYSTEM_DOWNLOAD_DURATION } else { 0 }
            system_extract_duration = if ($env:SYSTEM_EXTRACT_DURATION) { [double]$env:SYSTEM_EXTRACT_DURATION } else { 0 }
            base_download_duration = if ($env:BASE_DOWNLOAD_DURATION) { [double]$env:BASE_DOWNLOAD_DURATION } else { 0 }
            base_extract_duration = if ($env:BASE_EXTRACT_DURATION) { [double]$env:BASE_EXTRACT_DURATION } else { 0 }
            total_dependency_duration = if ($env:TOTAL_DEPENDENCY_DURATION) { [double]$env:TOTAL_DEPENDENCY_DURATION } else { 0 }
            precompile_setup_duration = if ($env:PRECOMPILE_SETUP_DURATION) { [double]$env:PRECOMPILE_SETUP_DURATION } else { 0 }
            compile_duration = if ($env:COMPILE_DURATION) { [double]$env:COMPILE_DURATION } else { 0 }
            post_compile_analysis_duration = if ($env:POST_COMPILE_ANALYSIS_DURATION) { [double]$env:POST_COMPILE_ANALYSIS_DURATION } else { 0 }
            container_creation_duration = if ($env:CONTAINER_CREATION_DURATION) { [double]$env:CONTAINER_CREATION_DURATION } else { 0 }
            publish_duration = if ($env:PUBLISH_DURATION) { [double]$env:PUBLISH_DURATION } else { 0 }
            test_duration = if ($env:TEST_DURATION) { [double]$env:TEST_DURATION } else { 0 }
            app_count = if ($env:APP_COUNT) { [int]$env:APP_COUNT } else { 0 }
            total_app_size_kb = if ($env:TOTAL_APP_SIZE_KB) { [double]$env:TOTAL_APP_SIZE_KB } else { 0 }
            timestamp = $endTime.ToString('yyyy-MM-ddTHH:mm:ss.fffZ')
            uses_container = $true
            uses_al_compiler = $true
            pipeline_type = "full-test"
            measurement_precision = "milliseconds"
            github_run_id = $env:GITHUB_RUN_ID
            github_run_number = $env:GITHUB_RUN_NUMBER
            github_sha = $env:GITHUB_SHA
        }

        $metrics | ConvertTo-Json | Out-File -FilePath "windows-full-test-metrics.json" -Encoding UTF8
        Write-Host "Metrics saved to windows-full-test-metrics.json"

        # Create raw measurements file for detailed external analysis
        $rawMeasurements = @{
            build_id = "$($env:GITHUB_RUN_ID)-$($env:GITHUB_RUN_NUMBER)"
            platform = "windows"
            runner = "windows-2022"
            pipeline_type = "full-test"
            start_time = $env:BUILD_START_TIME
            end_time = $endTime.ToString('yyyy-MM-ddTHH:mm:ss.fffZ')
            measurements = @(
                @{ stage = "setup"; duration = if ($env:SETUP_DURATION) { [double]$env:SETUP_DURATION } else { 0 }; unit = "seconds" }
                @{ stage = "dir_creation"; duration = if ($env:DIR_CREATION_DURATION) { [double]$env:DIR_CREATION_DURATION } else { 0 }; unit = "seconds" }
                @{ stage = "system_download"; duration = if ($env:SYSTEM_DOWNLOAD_DURATION) { [double]$env:SYSTEM_DOWNLOAD_DURATION } else { 0 }; unit = "seconds" }
                @{ stage = "system_extract"; duration = if ($env:SYSTEM_EXTRACT_DURATION) { [double]$env:SYSTEM_EXTRACT_DURATION } else { 0 }; unit = "seconds" }
                @{ stage = "base_download"; duration = if ($env:BASE_DOWNLOAD_DURATION) { [double]$env:BASE_DOWNLOAD_DURATION } else { 0 }; unit = "seconds" }
                @{ stage = "base_extract"; duration = if ($env:BASE_EXTRACT_DURATION) { [double]$env:BASE_EXTRACT_DURATION } else { 0 }; unit = "seconds" }
                @{ stage = "precompile_setup"; duration = if ($env:PRECOMPILE_SETUP_DURATION) { [double]$env:PRECOMPILE_SETUP_DURATION } else { 0 }; unit = "seconds" }
                @{ stage = "compile"; duration = if ($env:COMPILE_DURATION) { [double]$env:COMPILE_DURATION } else { 0 }; unit = "seconds" }
                @{ stage = "post_compile_analysis"; duration = if ($env:POST_COMPILE_ANALYSIS_DURATION) { [double]$env:POST_COMPILE_ANALYSIS_DURATION } else { 0 }; unit = "seconds" }
                @{ stage = "container_creation"; duration = if ($env:CONTAINER_CREATION_DURATION) { [double]$env:CONTAINER_CREATION_DURATION } else { 0 }; unit = "seconds" }
                @{ stage = "publish"; duration = if ($env:PUBLISH_DURATION) { [double]$env:PUBLISH_DURATION } else { 0 }; unit = "seconds" }
                @{ stage = "test"; duration = if ($env:TEST_DURATION) { [double]$env:TEST_DURATION } else { 0 }; unit = "seconds" }
            )
            totals = @{
                total_duration = $totalDuration
                dependency_total = if ($env:TOTAL_DEPENDENCY_DURATION) { [double]$env:TOTAL_DEPENDENCY_DURATION } else { 0 }
            }
            artifacts = @{
                app_count = if ($env:APP_COUNT) { [int]$env:APP_COUNT } else { 0 }
                total_app_size_kb = if ($env:TOTAL_APP_SIZE_KB) { [double]$env:TOTAL_APP_SIZE_KB } else { 0 }
            }
            environment = @{
                github_actions = $true
                runner_os = "Windows"
                measurement_precision = "milliseconds"
                bc_version = $env:BC_VERSION
                container_name = $env:CONTAINER_NAME
                uses_bccontainer_helper = $true
            }
        }

        $rawMeasurements | ConvertTo-Json -Depth 10 | Out-File -FilePath "windows-full-test-raw-measurements.json" -Encoding UTF8
        Write-Host "Raw measurements saved to windows-full-test-raw-measurements.json"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-full-test-artifacts
        path: |
          bin/
          TestResults/
          windows-full-test-metrics.json
          windows-full-test-raw-measurements.json
        retention-days: 30