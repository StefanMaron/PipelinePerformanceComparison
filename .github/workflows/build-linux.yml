name: Build Linux (Full Test)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AL_VERSION: 'latest'
  BCDEV_REPO: 'https://github.com/StefanMaron/BCDevOnLinux.git'
  BCDEV_BRANCH: 'v2'

jobs:
  build-linux-full-test:
    runs-on: ubuntu-latest
    name: Linux Full Build and Test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Free up disk space
      uses: jlumbroso/free-disk-space@main
      with:
        # Keep tool-cache and dotnet since we need them
        tool-cache: false
        dotnet: false
        # Remove what we don't need - faster subset
        android: true
        haskell: true
        large-packages: false
        swap-storage: false

    - name: Record start time
      run: |
        # Function to format bc output to ensure leading zero for decimals
        format_duration() {
            echo "$1" | sed 's/^\./0./'
        }

        START_TIME=$(date -Iseconds)
        START_EPOCH=$(date +%s.%N)
        echo "BUILD_START_TIME=$START_TIME" >> $GITHUB_ENV
        echo "BUILD_START_EPOCH=$START_EPOCH" >> $GITHUB_ENV
        echo "Build started at: $START_TIME"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install BC Development Tools for Linux
      run: |
        echo "Installing BC Development Tools for Linux..."
        dotnet tool install -g Microsoft.Dynamics.BusinessCentral.Development.Tools.Linux --version 16.0.24.41895-beta

        # Ensure dotnet tools are in PATH
        export PATH="$PATH:$HOME/.dotnet/tools"
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

    - name: Verify BC Development Tools installation
      run: |
        echo "Verifying BC Development Tools installation..."

        # Test AL command directly (ignore exit code since AL --version returns 1)
        AL --version || true

        SETUP_END=$(date +%s.%N)
        SETUP_DURATION=$(echo "$SETUP_END - $BUILD_START_EPOCH" | bc -l | sed 's/^\./0./')
        echo "SETUP_DURATION=$SETUP_DURATION" >> $GITHUB_ENV
        echo "Setup (.NET + AL tools + verification) took: $SETUP_DURATION seconds"

    - name: Create dependencies directory
      run: |
        DIR_START=$(date +%s.%N)
        mkdir -p .alpackages
        DIR_END=$(date +%s.%N)
        DIR_DURATION=$(echo "$DIR_END - $DIR_START" | bc -l | sed 's/^\./0./')
        echo "DIR_CREATION_DURATION=$DIR_DURATION" >> $GITHUB_ENV
        echo "Directory creation took: $DIR_DURATION seconds"

    - name: Download BC Symbol Packages
      run: |
        echo "Downloading Business Central symbol packages from Microsoft feed..."
        DOWNLOAD_START=$(date +%s.%N)

        # Microsoft BC Symbols NuGet feed
        BC_FEED="https://dynamicssmb2.pkgs.visualstudio.com/DynamicsBCPublicFeeds/_packaging/MSSymbols/nuget/v3/index.json"

        # Download packages directly using the discovered package base URL
        BC_VERSION="26.3.36158.36341"
        BC_BASE_URL="https://dynamicssmb2.pkgs.visualstudio.com/571e802d-b44b-45fc-bd41-4cfddec73b44/_packaging/b656b10c-3de0-440c-900c-bc2e4e86d84c/nuget/v3/flat2"

        mkdir -p temp_packages

        echo "Downloading Microsoft.SystemApplication.US.symbols..."
        curl -L -s -o "temp_packages/microsoft.systemapplication.us.symbols.nupkg" \
             "$BC_BASE_URL/microsoft.systemapplication.us.symbols.63ca2fa4-4f03-4f2b-a480-172fef340d3f/$BC_VERSION/microsoft.systemapplication.us.symbols.63ca2fa4-4f03-4f2b-a480-172fef340d3f.$BC_VERSION.nupkg" || echo "Failed to download System Application"

        echo "Downloading Microsoft.BaseApplication.US.symbols..."
        curl -L -s -o "temp_packages/microsoft.baseapplication.us.symbols.nupkg" \
             "$BC_BASE_URL/microsoft.baseapplication.us.symbols.437dbf0e-84ff-417a-965d-ed2bb9650972/$BC_VERSION/microsoft.baseapplication.us.symbols.437dbf0e-84ff-417a-965d-ed2bb9650972.$BC_VERSION.nupkg" || echo "Failed to download Base Application"

        echo "Downloading Microsoft.Application.US.symbols..."
        curl -L -s -o "temp_packages/microsoft.application.us.symbols.nupkg" \
             "$BC_BASE_URL/microsoft.application.us.symbols/$BC_VERSION/microsoft.application.us.symbols.$BC_VERSION.nupkg" || echo "Failed to download Application"

        # Second-level dependencies
        echo "Downloading Microsoft.BusinessFoundation.US.symbols (second-level dependency)..."
        curl -L -s -o "temp_packages/microsoft.businessfoundation.us.symbols.nupkg" \
             "$BC_BASE_URL/microsoft.businessfoundation.us.symbols.f3552374-a1f2-4356-848e-196002525837/$BC_VERSION/microsoft.businessfoundation.us.symbols.f3552374-a1f2-4356-848e-196002525837.$BC_VERSION.nupkg" || echo "Failed to download Business Foundation"

        # The actual System package (not SystemApplication)
        PLATFORM_VERSION="26.0.38176"
        echo "Downloading Microsoft.Platform.symbols v$PLATFORM_VERSION (System dependency)..."
        curl -L -s -o "temp_packages/microsoft.platform.symbols.nupkg" \
             "$BC_BASE_URL/microsoft.platform.symbols/$PLATFORM_VERSION/microsoft.platform.symbols.$PLATFORM_VERSION.nupkg" || echo "Failed to download Platform (System)"

        # Extract .nupkg files (which are zip files)
        mkdir -p temp_packages/extracted
        for nupkg in temp_packages/*.nupkg; do
            if [ -f "$nupkg" ] && [ -s "$nupkg" ]; then
                echo "Extracting $(basename "$nupkg")..."
                mkdir -p "temp_packages/extracted/$(basename "$nupkg" .nupkg)"
                unzip -q "$nupkg" -d "temp_packages/extracted/$(basename "$nupkg" .nupkg)" || echo "Failed to extract $nupkg"
            else
                echo "Skipping empty or missing file: $(basename "$nupkg")"
            fi
        done

        # Extract .app files from downloaded packages
        find temp_packages -name "*.app" -type f -exec cp {} .alpackages/ \;

        # Clean up temporary files
        rm -rf temp_packages

        DOWNLOAD_END=$(date +%s.%N)
        DOWNLOAD_DURATION=$(echo "$DOWNLOAD_END - $DOWNLOAD_START" | bc -l | sed 's/^\./0./')
        echo "SYSTEM_DOWNLOAD_DURATION=$DOWNLOAD_DURATION" >> $GITHUB_ENV
        echo "SYSTEM_EXTRACT_DURATION=0" >> $GITHUB_ENV
        echo "BC symbols download took: $DOWNLOAD_DURATION seconds"

        # List downloaded symbols
        echo "Downloaded symbol packages:"
        ls -la .alpackages/

    - name: Calculate total dependency time
      run: |
        # Calculate total time for BC symbol downloads
        echo "BASE_DOWNLOAD_DURATION=0" >> $GITHUB_ENV
        echo "BASE_EXTRACT_DURATION=0" >> $GITHUB_ENV
        TOTAL_DEP_TIME=$(echo "$SYSTEM_DOWNLOAD_DURATION + $SYSTEM_EXTRACT_DURATION" | bc -l | sed 's/^\./0./')
        echo "TOTAL_DEPENDENCY_DURATION=$TOTAL_DEP_TIME" >> $GITHUB_ENV
        echo "Total dependency handling: $TOTAL_DEP_TIME seconds"

    - name: Pre-compilation setup
      run: |
        SETUP_START=$(date +%s.%N)
        # No bin directory needed - AL compiler outputs to project root by default
        SETUP_END=$(date +%s.%N)
        SETUP_DURATION=$(echo "$SETUP_END - $SETUP_START" | bc -l | sed 's/^\./0./')
        echo "PRECOMPILE_SETUP_DURATION=$SETUP_DURATION" >> $GITHUB_ENV
        echo "Pre-compilation setup: $SETUP_DURATION seconds"

    - name: Compile AL Extension
      run: |
        echo "Compiling AL extension..."
        COMPILE_START=$(date +%s.%N)

        # Try compilation without specifying output directory (AL should create default output)
        if AL compile /project:"." /packagecachepath:".alpackages"; then
            COMPILE_END=$(date +%s.%N)
            COMPILE_DURATION=$(echo "$COMPILE_END - $COMPILE_START" | bc -l | sed 's/^\./0./')
            echo "COMPILE_DURATION=$COMPILE_DURATION" >> $GITHUB_ENV
            echo "Compilation took: $COMPILE_DURATION seconds"
            echo "Compilation successful"
        else
            echo "Compilation failed with exit code: $?"
            exit 1
        fi

    - name: Post-compilation analysis
      run: |
        ANALYSIS_START=$(date +%s.%N)

        # List and analyze compiled files in project root
        echo "Compiled files:"
        APP_COUNT=0
        TOTAL_SIZE_BYTES=0

        find . -maxdepth 1 -type f -name "*.app" | while read file; do
            SIZE_BYTES=$(stat -c%s "$file" 2>/dev/null || echo "0")
            SIZE_KB=$(echo "scale=2; $SIZE_BYTES / 1024" | bc -l | sed 's/^\./0./')
            echo "  $(basename "$file") - ${SIZE_KB} KB"
        done

        # Count apps and calculate total size
        APP_COUNT=$(find . -maxdepth 1 -type f -name "*.app" | wc -l)
        if [ "$APP_COUNT" -gt 0 ]; then
            TOTAL_SIZE_BYTES=$(find . -maxdepth 1 -type f -name "*.app" -exec stat -c%s {} + 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
            TOTAL_SIZE_KB=$(echo "scale=2; $TOTAL_SIZE_BYTES / 1024" | bc -l | sed 's/^\./0./')
            echo "APP_COUNT=$APP_COUNT" >> $GITHUB_ENV
            echo "TOTAL_APP_SIZE_KB=$TOTAL_SIZE_KB" >> $GITHUB_ENV
            echo "Total app size: ${TOTAL_SIZE_KB} KB"
        fi

        ANALYSIS_END=$(date +%s.%N)
        ANALYSIS_DURATION=$(echo "$ANALYSIS_END - $ANALYSIS_START" | bc -l | sed 's/^\./0./')
        echo "POST_COMPILE_ANALYSIS_DURATION=$ANALYSIS_DURATION" >> $GITHUB_ENV
        echo "Post-compilation analysis: $ANALYSIS_DURATION seconds"

    - name: Setup Docker for BC Container
      run: |
        echo "Setting up Docker environment..."
        DOCKER_SETUP_START=$(date +%s.%N)

        # Verify Docker is available
        docker --version
        docker compose version

        DOCKER_SETUP_END=$(date +%s.%N)
        DOCKER_SETUP_DURATION=$(echo "$DOCKER_SETUP_END - $DOCKER_SETUP_START" | bc -l | sed 's/^\./0./')
        echo "DOCKER_SETUP_DURATION=$DOCKER_SETUP_DURATION" >> $GITHUB_ENV
        echo "Docker setup took: $DOCKER_SETUP_DURATION seconds"

    - name: Clone BCDevOnLinux repository
      run: |
        echo "Cloning BCDevOnLinux repository..."
        CLONE_START=$(date +%s.%N)

        # Clone the repository to a temporary location
        git clone --branch ${{ env.BCDEV_BRANCH }} --depth 1 ${{ env.BCDEV_REPO }} bcdev-temp

        CLONE_END=$(date +%s.%N)
        CLONE_DURATION=$(echo "$CLONE_END - $CLONE_START" | bc -l | sed 's/^\./0./')
        echo "BCDEV_CLONE_DURATION=$CLONE_DURATION" >> $GITHUB_ENV
        echo "BCDevOnLinux clone took: $CLONE_DURATION seconds"

    - name: Build BC Container with Docker Compose
      run: |
        echo "Building Business Central container..."
        CONTAINER_BUILD_START=$(date +%s.%N)

        cd bcdev-temp

        # Build the container using docker compose
        docker compose build

        CONTAINER_BUILD_END=$(date +%s.%N)
        CONTAINER_BUILD_DURATION=$(echo "$CONTAINER_BUILD_END - $CONTAINER_BUILD_START" | bc -l | sed 's/^\./0./')
        echo "CONTAINER_BUILD_DURATION=$CONTAINER_BUILD_DURATION" >> $GITHUB_ENV
        echo "Container build took: $CONTAINER_BUILD_DURATION seconds"

        cd ..

    - name: Start BC Container
      run: |
        echo "Starting Business Central container..."
        CONTAINER_START_TIME=$(date +%s.%N)

        cd bcdev-temp

        # Start the container
        docker compose up -d

        # Wait for container to become healthy (can take up to 10 minutes)
        echo "Waiting for BC container to become healthy (this can take up to 10 minutes)..."
        CONTAINER_NAME=$(docker compose ps -q | head -n 1)
        MAX_WAIT=1200  # 20 minutes
        ELAPSED=0
        HEALTH_STATUS=""
        PREV_HEALTH_STATUS=""

        while [ $ELAPSED -lt $MAX_WAIT ]; do
            HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $CONTAINER_NAME 2>/dev/null || echo "unknown")

            if [ "$HEALTH_STATUS" = "healthy" ]; then
                echo "✓ BC container is healthy and ready"
                break
            fi

            # Check if container became unhealthy (was starting, now unhealthy)
            if [ "$HEALTH_STATUS" = "unhealthy" ] && [ "$PREV_HEALTH_STATUS" != "unhealthy" ]; then
                echo "⚠ Container became unhealthy - printing logs for investigation:"
                docker compose ps
                docker compose logs --tail=100
            fi

            echo "Container status: $HEALTH_STATUS (waited ${ELAPSED}s / ${MAX_WAIT}s)"
            PREV_HEALTH_STATUS="$HEALTH_STATUS"
            sleep 10
            ELAPSED=$((ELAPSED + 10))
        done

        # Final health check after loop completes (in case timeout was reached while healthy)
        HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $CONTAINER_NAME 2>/dev/null || echo "unknown")

        if [ "$HEALTH_STATUS" != "healthy" ]; then
            echo "ERROR: Container did not become healthy within $MAX_WAIT seconds"
            echo "Final status: $HEALTH_STATUS"
            echo "Printing full container logs:"
            docker compose ps
            docker compose logs
            exit 1
        fi

        # Check container status
        docker compose ps
        docker compose logs

        CONTAINER_START_END=$(date +%s.%N)
        CONTAINER_START_DURATION=$(echo "$CONTAINER_START_END - $CONTAINER_START_TIME" | bc -l | sed 's/^\./0./')
        echo "CONTAINER_START_DURATION=$CONTAINER_START_DURATION" >> $GITHUB_ENV
        echo "Container startup took: $CONTAINER_START_DURATION seconds"

        cd ..

    - name: Publish AL Extension to Container
      run: |
        echo "Publishing AL extension to BC container..."
        PUBLISH_START=$(date +%s.%N)

        # Find the app file in the project root
        APP_FILE=$(find . -maxdepth 1 -name "*.app" -type f | head -n 1)

        if [ -z "$APP_FILE" ]; then
            echo "ERROR: No app file found for publishing"
            exit 1
        fi

        echo "Publishing app file: $APP_FILE"

        # Publish extension to BC container using API
        curl -u "admin:Admin123!" \
             -F "file=@$APP_FILE" \
             "http://localhost:7049/BC/dev/apps?tenant=default&SchemaUpdateMode=synchronize&DependencyPublishingOption=default"

        PUBLISH_END=$(date +%s.%N)
        PUBLISH_DURATION=$(echo "$PUBLISH_END - $PUBLISH_START" | bc -l | sed 's/^\./0./')
        echo "PUBLISH_DURATION=$PUBLISH_DURATION" >> $GITHUB_ENV
        echo "Publishing took: $PUBLISH_DURATION seconds"

    - name: Run AL Tests in Container via OData
      run: |
        echo "Running AL tests in BC container via OData API..."
        TEST_START=$(date +%s.%N)

        # Execute test codeunit via OData API using PowerShell script
        # The script uses the Codeunit Run Request API (page 50002) to execute codeunit 50002 (Test CU)
        # Note: OData port is 7048, SOAP/web services port is 7049
        pwsh ./scripts/run-tests-odata.ps1 \
          -BaseUrl "http://localhost:7048/BC" \
          -Tenant "default" \
          -Username "admin" \
          -Password "Admin123!" \
          -CodeunitId 50002 \
          -MaxWaitSeconds 300

        TEST_EXIT_CODE=$?

        TEST_END=$(date +%s.%N)
        TEST_DURATION=$(echo "$TEST_END - $TEST_START" | bc -l | sed 's/^\./0./')
        echo "TEST_DURATION=$TEST_DURATION" >> $GITHUB_ENV
        echo "Testing took: $TEST_DURATION seconds"

        # Exit with the test script's exit code
        exit $TEST_EXIT_CODE

    - name: Cleanup Container
      if: always()
      run: |
        echo "Cleaning up BC container..."
        CLEANUP_START=$(date +%s.%N)

        cd bcdev-temp

        # Stop and remove containers
        docker compose down -v

        CLEANUP_END=$(date +%s.%N)
        CLEANUP_DURATION=$(echo "$CLEANUP_END - $CLEANUP_START" | bc -l | sed 's/^\./0./')
        echo "CLEANUP_DURATION=$CLEANUP_DURATION" >> $GITHUB_ENV
        echo "Container cleanup took: $CLEANUP_DURATION seconds"

        cd ..

    - name: Calculate comprehensive build metrics
      run: |
        END_TIME=$(date -Iseconds)
        END_EPOCH=$(date +%s.%N)
        TOTAL_DURATION=$(echo "$END_EPOCH - $BUILD_START_EPOCH" | bc -l | sed 's/^\./0./')

        echo "=== LINUX FULL BUILD & TEST PERFORMANCE SUMMARY ==="
        echo "Build Start Time: $BUILD_START_TIME"
        echo "Build End Time: $END_TIME"
        echo ""
        echo "=== DETAILED TIMINGS ==="
        echo "Setup (.NET + AL tools): $SETUP_DURATION seconds"
        echo "Directory Creation: $DIR_CREATION_DURATION seconds"
        echo "System App Download: $SYSTEM_DOWNLOAD_DURATION seconds"
        echo "System App Extract: $SYSTEM_EXTRACT_DURATION seconds"
        echo "Base App Download: $BASE_DOWNLOAD_DURATION seconds"
        echo "Base App Extract: $BASE_EXTRACT_DURATION seconds"
        echo "Total Dependencies: $TOTAL_DEPENDENCY_DURATION seconds"
        echo "Pre-compile Setup: $PRECOMPILE_SETUP_DURATION seconds"
        echo "Compilation: $COMPILE_DURATION seconds"
        echo "Post-compile Analysis: $POST_COMPILE_ANALYSIS_DURATION seconds"
        echo "Docker Setup: $DOCKER_SETUP_DURATION seconds"
        echo "BCDev Clone: $BCDEV_CLONE_DURATION seconds"
        echo "Container Build: $CONTAINER_BUILD_DURATION seconds"
        echo "Container Start: $CONTAINER_START_DURATION seconds"
        echo "Publishing: $PUBLISH_DURATION seconds"
        echo "Testing: $TEST_DURATION seconds"
        echo "Cleanup: ${CLEANUP_DURATION:-0} seconds"
        echo ""
        echo "=== BUILD SUMMARY ==="
        echo "Total Build Time: $TOTAL_DURATION seconds"
        if [ -n "$APP_COUNT" ]; then echo "Apps Generated: $APP_COUNT"; fi
        if [ -n "$TOTAL_APP_SIZE_KB" ]; then echo "Total App Size: $TOTAL_APP_SIZE_KB KB"; fi
        if [ -n "$TEST_FILE_COUNT" ]; then echo "Test Files Found: $TEST_FILE_COUNT"; fi

        # Create comprehensive JSON metrics for external analysis
        cat > linux-full-test-metrics.json << EOF
        {
          "platform": "linux-full-test",
          "runner_os": "ubuntu-latest",
          "total_duration": $TOTAL_DURATION,
          "setup_duration": ${SETUP_DURATION:-0},
          "dir_creation_duration": ${DIR_CREATION_DURATION:-0},
          "system_download_duration": ${SYSTEM_DOWNLOAD_DURATION:-0},
          "system_extract_duration": ${SYSTEM_EXTRACT_DURATION:-0},
          "base_download_duration": ${BASE_DOWNLOAD_DURATION:-0},
          "base_extract_duration": ${BASE_EXTRACT_DURATION:-0},
          "total_dependency_duration": ${TOTAL_DEPENDENCY_DURATION:-0},
          "precompile_setup_duration": ${PRECOMPILE_SETUP_DURATION:-0},
          "compile_duration": ${COMPILE_DURATION:-0},
          "post_compile_analysis_duration": ${POST_COMPILE_ANALYSIS_DURATION:-0},
          "docker_setup_duration": ${DOCKER_SETUP_DURATION:-0},
          "bcdev_clone_duration": ${BCDEV_CLONE_DURATION:-0},
          "container_build_duration": ${CONTAINER_BUILD_DURATION:-0},
          "container_start_duration": ${CONTAINER_START_DURATION:-0},
          "publish_duration": ${PUBLISH_DURATION:-0},
          "test_duration": ${TEST_DURATION:-0},
          "cleanup_duration": ${CLEANUP_DURATION:-0},
          "app_count": ${APP_COUNT:-0},
          "total_app_size_kb": ${TOTAL_APP_SIZE_KB:-0},
          "test_file_count": ${TEST_FILE_COUNT:-0},
          "timestamp": "$END_TIME",
          "uses_container": true,
          "pipeline_type": "full-test",
          "measurement_precision": "nanoseconds",
          "github_run_id": "${GITHUB_RUN_ID:-unknown}",
          "github_run_number": "${GITHUB_RUN_NUMBER:-unknown}",
          "github_sha": "${GITHUB_SHA:-unknown}"
        }
        EOF

        echo "Comprehensive metrics saved to linux-full-test-metrics.json"

        # Also create a raw measurements file for detailed analysis
        cat > linux-full-test-raw-measurements.json << EOF
        {
          "build_id": "${GITHUB_RUN_ID:-unknown}-${GITHUB_RUN_NUMBER:-unknown}",
          "platform": "linux",
          "runner": "ubuntu-latest",
          "pipeline_type": "full-test",
          "start_time": "$BUILD_START_TIME",
          "end_time": "$END_TIME",
          "measurements": [
            {"stage": "setup", "duration": ${SETUP_DURATION:-0}, "unit": "seconds"},
            {"stage": "dir_creation", "duration": ${DIR_CREATION_DURATION:-0}, "unit": "seconds"},
            {"stage": "system_download", "duration": ${SYSTEM_DOWNLOAD_DURATION:-0}, "unit": "seconds"},
            {"stage": "system_extract", "duration": ${SYSTEM_EXTRACT_DURATION:-0}, "unit": "seconds"},
            {"stage": "base_download", "duration": ${BASE_DOWNLOAD_DURATION:-0}, "unit": "seconds"},
            {"stage": "base_extract", "duration": ${BASE_EXTRACT_DURATION:-0}, "unit": "seconds"},
            {"stage": "precompile_setup", "duration": ${PRECOMPILE_SETUP_DURATION:-0}, "unit": "seconds"},
            {"stage": "compile", "duration": ${COMPILE_DURATION:-0}, "unit": "seconds"},
            {"stage": "post_compile_analysis", "duration": ${POST_COMPILE_ANALYSIS_DURATION:-0}, "unit": "seconds"},
            {"stage": "docker_setup", "duration": ${DOCKER_SETUP_DURATION:-0}, "unit": "seconds"},
            {"stage": "bcdev_clone", "duration": ${BCDEV_CLONE_DURATION:-0}, "unit": "seconds"},
            {"stage": "container_build", "duration": ${CONTAINER_BUILD_DURATION:-0}, "unit": "seconds"},
            {"stage": "container_start", "duration": ${CONTAINER_START_DURATION:-0}, "unit": "seconds"},
            {"stage": "publish", "duration": ${PUBLISH_DURATION:-0}, "unit": "seconds"},
            {"stage": "test", "duration": ${TEST_DURATION:-0}, "unit": "seconds"},
            {"stage": "cleanup", "duration": ${CLEANUP_DURATION:-0}, "unit": "seconds"}
          ],
          "totals": {
            "total_duration": $TOTAL_DURATION,
            "dependency_total": ${TOTAL_DEPENDENCY_DURATION:-0},
            "container_total": $(echo "${DOCKER_SETUP_DURATION:-0} + ${BCDEV_CLONE_DURATION:-0} + ${CONTAINER_BUILD_DURATION:-0} + ${CONTAINER_START_DURATION:-0}" | bc -l | sed 's/^\./0./')
          },
          "artifacts": {
            "app_count": ${APP_COUNT:-0},
            "total_app_size_kb": ${TOTAL_APP_SIZE_KB:-0},
            "test_file_count": ${TEST_FILE_COUNT:-0}
          },
          "environment": {
            "github_actions": true,
            "runner_os": "Linux",
            "measurement_precision": "nanoseconds",
            "uses_docker": true,
            "bcdev_repo": "${{ env.BCDEV_REPO }}",
            "bcdev_branch": "${{ env.BCDEV_BRANCH }}"
          }
        }
        EOF

        echo "Raw measurements saved to linux-full-test-raw-measurements.json"

    - name: Display system information
      run: |
        echo "=== SYSTEM INFORMATION ==="
        echo "OS: $(lsb_release -d | cut -f2)"
        echo "Kernel: $(uname -r)"
        echo "CPU: $(nproc) cores"
        echo "Memory: $(free -h | grep Mem | awk '{print $2}')"
        echo "Disk: $(df -h . | tail -1 | awk '{print $4}') available"
        echo "Docker: $(docker --version)"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-full-test-artifacts
        path: |
          *.app
          linux-full-test-metrics.json
          linux-full-test-raw-measurements.json
        retention-days: 30
